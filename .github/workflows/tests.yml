name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports and basic functionality
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from handlers.base_handler import BaseHandler
        from handlers.ping_handler import PingHandler
        from handlers.meteo_handler import MeteoHandler
        print('✅ All imports successful')
        
        # Test handler creation
        ping = PingHandler()
        print('✅ PingHandler created successfully')
        
        # Test with dummy API key
        meteo = MeteoHandler('dummy-key')
        print('✅ MeteoHandler created successfully')
        "

  docker-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t meshmate:test .
    
    - name: Test Docker image
      run: |
        # Test that the image runs without crashing
        timeout 10s docker run meshmate:test --help || true
        echo "✅ Docker image builds and runs successfully"